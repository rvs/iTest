<!--
  ~ Copyright (c) 2011, Cloudera, Inc. All Rights Reserved.
  ~
  ~ Cloudera, Inc. licenses this file to you under the Apache License,
  ~ Version 2.0 (the "License"). You may not use this file except in
  ~ compliance with the License. You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ This software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
  ~ CONDITIONS OF ANY KIND, either express or implied. See the License for
  ~ the specific language governing permissions and limitations under the
  ~ License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>
  <groupId>com.cloudera.itest</groupId>
  <artifactId>smoke-tests</artifactId>
  <packaging>pom</packaging>
  <version>1.0-cdh3u1-SNAPSHOT</version>
  <name>hadoop-stack-validation</name>

  <properties>
  <!--
    Top-level POM file for Hadoop stack testing collects together a number of
    common functionality, dependencies,
    Most of the defaults can be overwritten in sub-modules if so desired.
  -->
    <!--
      Making sure that we have proper variables needed for Hadoop testing
      These settings should be enforced at the top level
    -->
    <HADOOP_HOME>${env.HADOOP_HOME}</HADOOP_HOME>
    <HADOOP_CONF_DIR>${env.HADOOP_CONF_DIR}</HADOOP_CONF_DIR>
    <!--
      Default include mask for failsafe plugin. OPTIONAL
      Default value is set below
      If a module needs to run different set of tests this property has to be
      overwritten
    -->
    <org.apache.maven-failsafe-plugin.testInclude>**/Test*</org.apache.maven-failsafe-plugin.testInclude>
    <!--
        destination folder where all temp. files will be copied for further processing, REQUIRED
        Should be defined in a sub-module
    -->
    <org.codehaus.groovy.maven.destination>${project.build.testOutputDirectory}</org.codehaus.groovy.maven.destination>
    <!--
        test artifact jar name to be processes e.g. data unpacking, etc, REQUIRED
        Should be defined in a sub-module
    -->
    <org.codehaus.groovy.maven.jar></org.codehaus.groovy.maven.jar>
    <!--
        groupId of test artifact which contains jar files, REQUIRED
        Should be defined in a sub-module
    -->
    <org.apache.maven-dependency-plugin.groupId></org.apache.maven-dependency-plugin.groupId>
    <!--
        artifactId of test artifact which contains jar files, REQUIRED
        Should be defined in a sub-module
    -->
    <org.apache.maven-dependency-plugin.artifactId></org.apache.maven-dependency-plugin.artifactId>
    <!--
        version of test artifact which contains jar files, REQUIRED
        Should be defined in a sub-module
    -->
    <org.apache.maven-dependency-plugin.version></org.apache.maven-dependency-plugin.version>
    <!--
        target folder where all temp. files will be unpacked, OPTIONAL
        Default value is set below
    -->
    <org.apache.maven-dependency-plugin.output>${project.build.directory}</org.apache.maven-dependency-plugin.output>
    <!--
        MAINTAINER property: not to be overridden by users
    -->
    <maven.internal.snapshots>http://azov01.sf.cloudera.com:8081/artifactory/libs-snapshot-local</maven.internal.snapshots>
    <maven.internal.releases>http://azov01.sf.cloudera.com:8081/artifactory/libs-release-local</maven.internal.releases>
    <maven.releases>https://repository.cloudera.com/content/groups/cdh-releases-rcs/</maven.releases>

    <!--
      BOM definitions
    -->
    <itest-conf.version>1.1-SNAPSHOT</itest-conf.version>
    <itest-common.version>1.1-SNAPSHOT</itest-common.version>
    <hadoop.version>0.20.2-cdh3u0</hadoop.version>
    <hadoop-smoke.version>0.20.2-cdh3u1-SNAPSHOT</hadoop-smoke.version>
    <flume-smoke.version>0.9.3-cdh3u1-SNAPSHOT</flume-smoke.version>
    <hbase-smoke.version>0.90.1-cdh3u1-SNAPSHOT</hbase-smoke.version>
    <hive-smoke.version>0.7.0-cdh3u1-SNAPSHOT</hive-smoke.version>
    <oozie-smoke.version>2.3.0-cdh3u1-SNAPSHOT</oozie-smoke.version>
    <package-smoke.version>1.0-cdh3u1-SNAPSHOT</package-smoke.version>
    <pig-smoke.version>0.8.0-SNAPSHOT</pig-smoke.version>
    <pig.version>0.8.0-cdh3u0</pig.version>
    <sqoop.version>1.2.0-cdh3u0</sqoop.version>
    <sqoop-integration.version>1.2.0-cdh3u1-SNAPSHOT</sqoop-integration.version>
    <!--
      End of BOM definitions
    -->
  </properties>

  <repositories>
    <repository>
      <id>libs-snapshot</id>
      <name>Internal Snapshots</name>
      <url>${maven.internal.snapshots}</url>
    </repository>
    <repository>
      <id>libs-release</id>
      <name>Internal Releases</name>
      <url>${maven.internal.releases}</url>
    </repository>
    <repository>
      <id>releases</id>
      <name>Cloudera Releases</name>
      <url>${maven.releases}</url>
    </repository>
  </repositories>

  <scm>
    <connection>scm:git:git://github.com/cloudera/iTest.git</connection>
  </scm>

  <distributionManagement>
    <snapshotRepository>
      <id>azov01.sf.cloudera.com</id>
      <name>Internal Snapshots</name>
      <url>${maven.internal.snapshots}</url>
    </snapshotRepository>
    <repository>
      <id>azov01.sf.cloudera.com</id>
      <name>Internal Releases</name>
      <url>${maven.internal.releases}</url>
    </repository>
  </distributionManagement>

  <!--
    List of modules which should be executed as a part of stack testing run
  -->
  <modules>
    <module>conf</module>
    <module>pig</module>
    <module>hive</module>
    <module>hadoop</module>
    <module>oozie</module>
    <module>sqoop</module>
    <module>flume</module>
    <module>hbase</module>
  </modules>

  <dependencyManagement>
    <dependencies>
      <!-- Import configuration resources for the stack validation -->
      <dependency>
        <groupId>com.cloudera.itest</groupId>
        <artifactId>smoke-tests-conf</artifactId>
        <version>${itest-conf.version}</version>
        <scope>test</scope>
      </dependency>
      <!-- Import of iTest artifact serving out-of-the-jar convenience methods -->
      <dependency>
        <groupId>com.cloudera.itest</groupId>
        <artifactId>itest-common</artifactId>
        <version>${itest-common.version}</version>
        <scope>test</scope>
      </dependency>
      <!-- We HAVE to enforce use of this particular version of the launcher
           so it isn't overridden by any of transitive dependencies later on
      -->
      <dependency>
        <groupId>org.apache.ant</groupId>
        <artifactId>ant-launcher</artifactId>
        <version>1.8.2</version>
      </dependency>
      <!-- Gmaven plugin enables a lot of runtime flexibility for us -->
      <dependency>
        <groupId>org.codehaus.groovy.maven.runtime</groupId>
        <artifactId>gmaven-runtime-1.6</artifactId>
        <version>1.0</version>
      </dependency>

<!--
  BOM definitions
-->
<!-- Product artifacts -->
      <dependency>
        <groupId>org.apache.hadoop</groupId>
        <artifactId>hadoop-core</artifactId>
        <version>${hadoop.version}</version>
      </dependency>
      <dependency>
        <groupId>org.apache.pig</groupId>
        <artifactId>pig</artifactId>
        <version>${pig.version}</version>
        <scope>test</scope>
      </dependency>
<!-- Test artifacts -->
      <dependency>
        <groupId>com.cloudera.itest</groupId>
        <artifactId>hadoopsmoke</artifactId>
        <version>${hadoop-smoke.version}</version>
        <!-- FIXME: test-jar seems to be an suboptimal thing to use for
          artifacts of this kind: it causes all sorts of the issue such as
          need to explicitly specify the version of the artifact
          in the module POM file.
          Same goes for the rest of the bunch here-->
        <type>test-jar</type>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>com.cloudera.itest</groupId>
        <artifactId>hbasesmoke</artifactId>
        <version>${hbase-smoke.version}</version>
        <type>test-jar</type>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>com.cloudera.itest</groupId>
        <artifactId>hivesmoke</artifactId>
        <version>${hive-smoke.version}</version>
        <type>test-jar</type>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>com.cloudera.itest</groupId>
        <artifactId>ooziesmoke</artifactId>
        <version>${oozie-smoke.version}</version>
        <type>test-jar</type>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>org.apache.pig</groupId>
        <artifactId>pigsmoke</artifactId>
        <version>${pig-smoke.version}</version>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>com.cloudera.itest</groupId>
        <artifactId>packagesmoke</artifactId>
        <version>${package-smoke.version}</version>
        <type>test-jar</type>
        <scope>test</scope>
      </dependency>
      <dependency>
        <groupId>com.cloudera.sqoop</groupId>
        <artifactId>sqoop</artifactId>
        <version>${sqoop.version}</version>
        <type>test-jar</type>
        <scope>test</scope>
      </dependency>

<!--
  End of BOM definitions
-->

    </dependencies>
  </dependencyManagement>

  <dependencies>
    <!-- We have to be configured in order to function properly -->
    <dependency>
      <groupId>com.cloudera.itest</groupId>
      <artifactId>smoke-tests-conf</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- Turn them on for all children -->
    <dependency>
      <groupId>com.cloudera.itest</groupId>
      <artifactId>itest-common</artifactId>
      <scope>test</scope>
    </dependency>
    <!-- Gmaven plugin enables a lot of runtime flexibility for us -->
    <dependency>
      <groupId>org.codehaus.groovy.maven.runtime</groupId>
      <artifactId>gmaven-runtime-1.6</artifactId>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <!--Let's skip unit tests all together for there are none-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.7</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <version>1.0</version>
        <executions>
          <execution>
            <id>enforce-property</id>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <requireProperty>
                  <property>HADOOP_CONF_DIR</property>
                  <message>HADOOP_CONF_DIR env. variable has to be set</message>
                </requireProperty>
                <requireProperty>
                  <property>HADOOP_HOME</property>
                  <message>HADOOP_HOME env. variable has to be set</message>
                </requireProperty>
              </rules>
              <fail>true</fail>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>2.7.1</version>
        <configuration>
          <includes>
            <include>${org.apache.maven-failsafe-plugin.testInclude}</include>
          </includes>
          <workingDirectory>${project.build.directory}</workingDirectory>
          <systemPropertyVariables>
             <HADOOP_HOME>${HADOOP_HOME}</HADOOP_HOME>
             <log4j.configuration>com.cloudera.itest.log4j.configuration</log4j.configuration>
             <com.cloudera.itest.log4j.level>INFO</com.cloudera.itest.log4j.level>
          </systemPropertyVariables>
          <additionalClasspathElements>
            <additionalClasspathElement>${HADOOP_CONF_DIR}</additionalClasspathElement>
            <com.cloudera.itest.JUnitUtils.results.dir>${project.build.directory}/failsafe-reports</com.cloudera.itest.JUnitUtils.results.dir>
          </additionalClasspathElements>
        </configuration>
        <executions>
          <execution>
            <id>integration-test</id>
            <goals>
              <goal>integration-test</goal>
            </goals>
          </execution>
          <execution>
            <id>verify</id>
            <goals>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- This is were actual preparation is started -->
      <plugin>
        <groupId>org.codehaus.groovy.maven</groupId>
        <artifactId>gmaven-plugin</artifactId>
        <version>1.0</version>
        <executions>
          <execution>
            <id>check-testslist</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>execute</goal>
            </goals>
            <configuration>
              <source><![CDATA[
                import com.cloudera.itest.*
 
                def nm   = project.properties['org.apache.maven-dependency-plugin.artifactId'];
                def vers = project.properties['org.apache.maven-dependency-plugin.version'];
                def trgt = project.build.directory;

                def src = project.properties['org.codehaus.groovy.maven.jar'] ?: 
                          "${trgt}/${nm}-${vers}-tests.jar";
                def prefix = project.properties['org.codehaus.groovy.maven.destination'];

                try { 
                  JarContent.listContent(src).each {
                    TestListUtils.touchTestFiles(prefix, it);
                  };
                } catch (Throwable ex) {
                  println "[WARNING] No test classes were found inside of: ${src}";
                }
                ]]>
              </source>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
    <!-- The following plugins must be enabled inside modules in order to work -->
    <pluginManagement>
      <plugins>
        <!-- Copy the test artifacts so it is easier to deal with it-->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <executions>
            <execution>
              <id>copy-testartifact-jar</id>
              <phase>generate-test-resources</phase>
              <goals>
                <goal>copy</goal>
              </goals>
              <configuration>
                <artifactItems>
                  <artifactItem>
                    <groupId>${org.apache.maven-dependency-plugin.groupId}</groupId>
                    <artifactId>${org.apache.maven-dependency-plugin.artifactId}</artifactId>
                    <version>${org.apache.maven-dependency-plugin.version}</version>
                    <type>test-jar</type>
                    <outputDirectory>${org.apache.maven-dependency-plugin.output}</outputDirectory>
                  </artifactItem>
                </artifactItems>
              </configuration>
            </execution>
            <execution>
              <id>unpack-testartifact-jar</id>
              <phase>generate-test-resources</phase>
              <goals>
                <goal>unpack</goal>
              </goals>
              <configuration>
                <artifactItems>
                  <artifactItem>
                    <groupId>${org.apache.maven-dependency-plugin.groupId}</groupId>
                    <artifactId>${org.apache.maven-dependency-plugin.artifactId}</artifactId>
                    <version>${org.apache.maven-dependency-plugin.version}</version>
                    <type>test-jar</type>
                    <outputDirectory>${project.build.directory}</outputDirectory>
                    <includes>${org.apache.maven-dependency-plugin.pattern}</includes>
                  </artifactItem>
                </artifactItems>
              </configuration>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
